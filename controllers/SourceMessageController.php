<?php

namespace app\controllers;

use app\models\Message;
use Yii;
use app\models\SourceMessage;
use app\models\SourceMessageSearch;
use yii\db\Exception;
use yii\web\Controller;
use yii\web\NotFoundHttpException;
use yii\filters\VerbFilter;

/**
 * SourceMessageController implements the CRUD actions for SourceMessage model.
 */
class SourceMessageController extends Controller
{
    public $layout = "index";

    public function beforeAction($action)
    {
        if(Yii::$app->language != Yii::$app->session->get("lang"))
            Yii::$app->language = Yii::$app->session->get("lang");

        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'delete' => ['POST'],
                ],
            ],
        ];
    }

    /**
     * Lists all SourceMessage models.
     * @return mixed
     */
    public function actionIndex()
    {
        $searchModel = new SourceMessageSearch();
        $dataProvider = $searchModel->search(Yii::$app->request->queryParams);

        return $this->render('index', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }

    /**
     * Displays a single SourceMessage model.
     * @param integer $id
     * @return mixed
     */
    public function actionView($id)
    {
        return $this->render('view', [
            'model' => $this->findModel($id),
        ]);
    }

    /**
     * Creates a new SourceMessage model.
     * If creation is successful, the browser will be redirected to the 'view' page.
     * @return mixed
     */
    public function actionCreate()
    {
        $model = new SourceMessage();

        if ($model->load(Yii::$app->request->post())) {
            try {
                if(!$model->save())
                    throw new Exception(json_encode($model->errors));

                $message = new Message();
                $message->id = $model->id;
                $message->language = "la-LA";
                $post = Yii::$app->request->post();
                $message->translation = $post["SourceMessage"]["translation"];
                if(!$message->save())
                    throw new Exception(json_encode($message->errors));

            } catch (Exception $ex) {
                Yii::$app->session->setFlash("danger", json_encode($ex->getMessage()));
            }
            return $this->redirect(['view', 'id' => $model->id]);
        } else {
            return $this->render('create', [
                'model' => $model,
            ]);
        }
    }

    /**
     * Updates an existing SourceMessage model.
     * If update is successful, the browser will be redirected to the 'view' page.
     * @param integer $id
     * @return mixed
     */
    public function actionUpdate($id)
    {
        $model = $this->findModel($id);

        if ($model->load(Yii::$app->request->post())) {
            if(!$model->save())
                throw new Exception(json_encode($model->errors));
            $message = Message::findOne(["id" => $model->id, "language" => "la-LA"]);
            if(!isset($message)) {
                $message = new Message();
                $message->id= $model->id;
                $message->language = "la-LA";
            }
            $post = Yii::$app->request->post();
            $message->translation = $post["SourceMessage"]["translation"];
            if(!$message->save())
                throw new Exception(json_encode($message->errors));
            return $this->redirect(['view', 'id' => $model->id]);
        } else {
            return $this->render('update', [
                'model' => $model,
            ]);
        }
    }

    /**
     * Deletes an existing SourceMessage model.
     * If deletion is successful, the browser will be redirected to the 'index' page.
     * @param integer $id
     * @return mixed
     */
    public function actionDelete($id)
    {
        $this->findModel($id)->delete();

        return $this->redirect(['index']);
    }

    /**
     * Finds the SourceMessage model based on its primary key value.
     * If the model is not found, a 404 HTTP exception will be thrown.
     * @param integer $id
     * @return SourceMessage the loaded model
     * @throws NotFoundHttpException if the model cannot be found
     */
    protected function findModel($id)
    {
        if (($model = SourceMessage::findOne($id)) !== null) {
            return $model;
        } else {
            throw new NotFoundHttpException('The requested page does not exist.');
        }
    }
}
